generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  password  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts             Account[]
  sessions             Session[]
  ownedWorkspaces      Workspace[]
  workspaceMemberships WorkspaceMember[]
  assignedTasks        TaskAssignment[]
  createdTasks         Task[]           @relation("TaskCreator")
  uploadedFiles        File[]
  taskComments         TaskComment[]
  fileComments         FileComment[]
  settings             UserSettings?
  notificationSettings NotificationSettings?
  activityLogs         ActivityLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  icon        String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members WorkspaceMember[]
  tasks   Task[]
  files   File[]
  folders Folder[]
  settings WorkspaceSettings?
  activityLogs ActivityLog[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  workspaceId String
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  workspace     Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy     User               @relation("TaskCreator", fields: [createdById], references: [id])
  assignments   TaskAssignment[]
  comments      TaskComment[]

  @@map("tasks")
}

model TaskAssignment {
  id     String @id @default(cuid())
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignments")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}


model Folder {
  id          String   @id @default(cuid())
  name        String
  workspaceId String
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]  @relation("FolderHierarchy")
  files     File[]

  @@map("folders")
}

model File {
  id           String   @id @default(cuid())
  name         String
  originalName String
  mimeType     String
  size         Int
  url          String
  workspaceId  String
  folderId     String?
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspace  Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder     Folder?          @relation(fields: [folderId], references: [id])
  uploadedBy User             @relation(fields: [uploadedById], references: [id])
  tags       FileTag[]
  comments   FileComment[]

  @@map("files")
}


model FileTag {
  id     String @id @default(cuid())
  fileId String
  tag    String
  color  String @default("#3B82F6")

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, tag])
  @@map("file_tags")
}

model FileComment {
  id        String   @id @default(cuid())
  content   String
  fileId    String
  userId    String
  createdAt DateTime @default(now())

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("file_comments")
}

enum UserRole {
  ADMIN
  USER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED  
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  theme                 Theme    @default(LIGHT)
  language              String   @default("en")
  timezone              String   @default("UTC")
  dateFormat            String   @default("MM/dd/yyyy")
  timeFormat            String   @default("12h")
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  desktopNotifications  Boolean  @default(true)
  soundEnabled          Boolean  @default(true)
  autoSave              Boolean  @default(true)
  compactMode           Boolean  @default(false)
  showAvatars           Boolean  @default(true)
  activityVisible       Boolean  @default(true)
  
  // Privacy settings
  profileVisibility     String   @default("WORKSPACE_ONLY") // PUBLIC, WORKSPACE_ONLY, PRIVATE
  showOnlineStatus      Boolean  @default(true)
  allowDirectMessages   Boolean  @default(true)
  allowWorkspaceInvites Boolean  @default(true)
  dataProcessingConsent Boolean  @default(true)
  analyticsConsent      Boolean  @default(true)
  marketingConsent      Boolean  @default(false)
  shareUsageData        Boolean  @default(false)
  
  // Security settings
  twoFactorEnabled      Boolean? @default(false)
  sessionTimeout        Int?     @default(480) // minutes
  loginNotifications    Boolean? @default(true)
  suspiciousActivityAlerts Boolean? @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model WorkspaceSettings {
  id                    String   @id @default(cuid())
  workspaceId           String   @unique
  isPublic              Boolean  @default(false)
  allowGuests           Boolean  @default(false)
  requireApproval       Boolean  @default(true)
  defaultRole           WorkspaceRole @default(MEMBER)
  maxMembers            Int      @default(50)
  allowFileSharing      Boolean  @default(true)
  allowComments         Boolean  @default(true)
  allowTaskAssignment   Boolean  @default(true)
  emailInvites          Boolean  @default(true)
  activityTracking      Boolean  @default(true)
  retentionDays         Int      @default(365)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_settings")
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // Delivery methods
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(true)
  desktopNotifications  Boolean  @default(true)
  soundEnabled          Boolean  @default(true)
  
  // Notification types
  taskReminders         Boolean  @default(true)
  commentNotifications  Boolean  @default(true)
  mentionNotifications  Boolean  @default(true)
  workspaceInvites      Boolean  @default(true)
  systemUpdates         Boolean  @default(true)
  
  // Timing settings
  notificationFrequency String   @default("IMMEDIATE") // IMMEDIATE, HOURLY, DAILY, WEEKLY
  quietHoursEnabled     Boolean  @default(false)
  quietHoursStart       String   @default("22:00") // HH:MM format
  quietHoursEnd         String   @default("08:00") // HH:MM format
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String?
  action      String   // Description of the action
  entityType  String?  // task, file, workspace, etc.
  entityId    String?
  details     Json?    // Additional context data
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([workspaceId])
  @@index([createdAt])
  @@map("activity_logs")
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum NotificationFrequency {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  NEVER
}

enum ActivityType {
  LOGIN
  LOGOUT
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_COMPLETED
  FILE_UPLOADED
  FILE_DOWNLOADED
  FILE_DELETED
  FILE_SHARED
  COMMENT_ADDED
  COMMENT_DELETED
  WORKSPACE_CREATED
  WORKSPACE_UPDATED
  WORKSPACE_DELETED
  MEMBER_INVITED
  MEMBER_JOINED
  MEMBER_LEFT
  MEMBER_REMOVED
  SETTINGS_UPDATED
}
