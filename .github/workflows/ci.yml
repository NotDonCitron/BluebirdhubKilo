name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, pre-deployment-fixes]
    paths:
      - 'app/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/**'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './app'

jobs:
  # Job 1: Code Quality and Testing
  quality-and-test:
    name: 'Code Quality & Tests'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Generate Prisma client'
        run: npm run db:generate

      - name: 'Check code formatting'
        run: npm run format:check

      - name: 'Run ESLint'
        run: npm run lint

      - name: 'Run TypeScript type checking'
        run: npm run type-check

      - name: 'Run unit tests'
        run: npm run test -- --coverage --watchAll=false
        env:
          CI: true

      - name: 'Upload coverage reports'
        uses: codecov/codecov-action@v4
        with:
          directory: ./app/coverage
          fail_ci_if_error: false

  # Job 2: Security Audit
  security:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Run security audit'
        run: npm run audit:security

      - name: 'Check licenses'
        run: npm run audit:licenses

  # Job 3: Build Verification
  build:
    name: 'Build Verification'
    runs-on: ubuntu-latest
    needs: [quality-and-test, security]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Generate Prisma client'
        run: npm run db:generate

      - name: 'Build application'
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_URL: 'http://localhost:3000'
          NEXTAUTH_SECRET: 'test-secret-for-ci'
          DATABASE_URL: 'file:./test.db'

      - name: 'Upload build artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app/.next/
            app/coverage/
          retention-days: 7

  # Job 4: Dependency Review (for PRs only)
  dependency-review:
    name: 'Dependency Review'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          config-file: './.github/dependency-review-config.yml'